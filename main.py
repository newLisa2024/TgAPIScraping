# main.py

import asyncio
import csv
import os
import random
import requests
from telethon import TelegramClient, errors
from config import API_ID, API_HASH, PHONE, AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME
from utils.safety import safe_request
from utils.logger import setup_logger

# –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—É—Å–∫–∞
print("‚ñ∂Ô∏è  –°—Ç–∞—Ä—Ç main.py")
print(f"üîß –ö–æ–Ω—Ñ–∏–≥: BASE_ID={AIRTABLE_BASE_ID}, TABLE_NAME='{AIRTABLE_TABLE_NAME}'")

# –ü–ê–†–ê–ú–ï–¢–†–´ (–¥–ª—è —Ç–µ—Å—Ç–∞)
REQUEST_DELAY = 1       # –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)
MAX_POSTS = 2       # —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
CHANNEL = "DeepLearning_ai"  # –±–µ–∑ @

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–µ—Ä
logger = setup_logger()
# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç
os.makedirs("data/media", exist_ok=True)
os.makedirs("sessions", exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon
client = TelegramClient("sessions/main_session", API_ID, API_HASH)

async def download_media(message):
    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è CSV, –Ω–µ –¥–ª—è Airtable
    if message.media:
        dst = f"data/media/{message.id}_{message.date:%Y%m%d%H%M%S}"
        await safe_request(client.download_media, message, file=dst)
        return dst
    return ""

async def scrape_channel(channel_username):
    print(f"‚ñ∂Ô∏è  scrape_channel @{channel_username}, limit={MAX_POSTS}")
    logger.info(f"üîç –°–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {MAX_POSTS} –ø–æ—Å—Ç–æ–≤ –∏–∑ @{channel_username}")

    posts = []
    async for message in client.iter_messages(channel_username, limit=MAX_POSTS):
        await asyncio.sleep(REQUEST_DELAY + random.uniform(0,1))
        try:
            text = message.text or message.message or ""
            media_path = await download_media(message)

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
            post = {
                "ID":      message.id,
                "Channel": CHANNEL,
                "Date":    message.date.strftime("%Y-%m-%d %H:%M:%S"),
                "Text":    text,
                "Views":   getattr(message, "views", 0)
            }
            posts.append(post)

            print(f"üì• –ü–æ—Å—Ç #{message.id} (Total={len(posts)})")
            logger.info(f"üì• –ü–æ—Å—Ç #{message.id} (Total={len(posts)})")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è Airtable (–±–µ–∑ –ø–æ–ª–µ–π Media –∏ Status)
            airtable_fields = {
                "Telegram ID": str(post["ID"]),
                "Channel": post["Channel"],
                "Date": post["Date"],
                "Text": post["Text"],
                "Views": post["Views"]
            }

            airtable_url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
            headers = {
                "Authorization": f"Bearer {AIRTABLE_API_KEY}",
                "Content-Type": "application/json"
            }
            resp = requests.post(airtable_url, json={"fields": airtable_fields}, headers=headers, timeout=10)
            print(f"‚û°Ô∏è Airtable POST {resp.status_code}")
            logger.info(f"‚û°Ô∏è Airtable POST {resp.status_code}: {resp.text}")
            resp.raise_for_status()

        except errors.FloodWaitError as e:
            wait = e.seconds + 5
            print(f"‚ö†Ô∏è FloodWaitError #{message.id}, –∂–¥—ë–º {wait}s")
            logger.warning(f"‚ö†Ô∏è FloodWaitError #{message.id}, –∂–¥—ë–º {wait}s")
            await asyncio.sleep(wait)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–µ #{message.id}: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–µ #{message.id}: {e}")

        print(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ–±—Ä–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ–±—Ä–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")

        # –ó–∞–ø–∏—Å—å –≤ CSV
        csv_file = "data/posts.csv"
        exists = os.path.exists(csv_file)
        with open(csv_file, "a" if exists else "w", newline="", encoding="utf-8") as f:
            fieldnames = ["ID", "Channel", "Date", "Text", "Views"]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            if not exists:
                writer.writeheader()
            writer.writerows(posts)

        print(f"‚úÖ posts.csv –æ–±–Ω–æ–≤–ª—ë–Ω: +{len(posts)} —Å—Ç—Ä–æ–∫")
        logger.info(f"‚úÖ posts.csv –æ–±–Ω–æ–≤–ª—ë–Ω: +{len(posts)} —Å—Ç—Ä–æ–∫")

    async def main():
        print("‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞")
        await client.start(phone=PHONE)
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω")
        try:
            await scrape_channel(CHANNEL)
        finally:
            print("‚ñ∂Ô∏è  –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞")
            await client.disconnect()
            print("‚ùé –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –í—ã—Ö–æ–¥.")

    if __name__ == "__main__":
        asyncio.run(main())








